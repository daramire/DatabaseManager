@page "/createindex"
@inject ICreateIndex createIndex
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h2>Create Index</h2>

<p>Target Database: @singleton.TargetConnector</p>

<button class="btn btn-primary" @onclick="StartIndex">Start Indexing</button>

<div>
    <ProgressBar ValueNow="barValue" />
</div>

<div>
    <p>Current status: @statusMessage</p>
</div>

@code {
    List<ParentIndexNodes> pNodes;
    CreateIndexParameters iParameters = new CreateIndexParameters();
    private string statusMessage = "Not started";
    public int barValue = 0;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
    }

    protected async Task StartIndex()
    {
        progress("Starting indexing...");
        iParameters.DataConnector = singleton.TargetConnector;
        iParameters.IndexName = "Default";

        try
        {
            pNodes = await createIndex.CreateParentNodes(iParameters);
            int nodeInt = 100 / pNodes.Count;
            for (int j = 0; j < pNodes.Count; j++)
            {
                ParentIndexNodes node = pNodes[j];
                iParameters.ParentNodeNumber = j;
                iParameters.ParentNodeId = node.ParentNodeId;
                int childInt = nodeInt / node.NodeCount;
                for (int i = 0; i < node.NodeCount; i++)
                {
                    iParameters.ParentNumber = i;
                    await createIndex.CreateChildIndexes(iParameters);
                    barValue = barValue + childInt;
                }
            }
            barValue = 100;
            progress("Indexing complete");
        }
        catch (Exception ex)
        {
            progress($"Error indexing: {ex.Message}");
            return;
        }

    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}
