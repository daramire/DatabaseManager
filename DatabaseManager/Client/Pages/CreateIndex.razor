@page "/createindex"
@inject ICreateIndex createIndex
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h2>Create Index</h2>

<p>Target Database: @singleton.TargetConnector</p>

@if (taxonomies == null)
{
    <text>Loading...</text>
}
else
{
    <GenericSelector Options="taxonomies" Selection="Selected" Label="Choose Taxonomy"/>
}

<button class="btn btn-primary" @onclick="StartIndex">Start Indexing</button>

<div>
    <ProgressBar ValueNow="barValue" />
</div>

<div>
    <p>Current status: @statusMessage</p>
</div>

@code {
    List<string> taxonomies;
    CreateIndexParameters iParameters = new CreateIndexParameters();
    private string statusMessage = "Not started";
    private string TaxonomyFile = "";
    public int barValue = 0;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
        taxonomies = await createIndex.GetTaxonomies();
    }

    private async Task Selected(string selectedString)
    {
        TaxonomyFile = selectedString;
    }

    protected async Task StartIndex()
    {
        progress("Starting indexing...");
        iParameters = new CreateIndexParameters();
        iParameters.Taxonomy = TaxonomyFile;
        iParameters.TargetName = singleton.TargetConnector;
        iParameters.SourceName = singleton.TargetConnector;
        barValue = 1;
        progress("Starting indexing...");
        try
        {
            DateTime timeStart = DateTime.Now;
            await createIndex.Create(iParameters);
            DateTime timeEnd = DateTime.Now;
            TimeSpan diff = timeEnd - timeStart;
            Console.WriteLine($"Time span: {diff}");
            barValue = 100;
            progress("Indexing complete");
        }
        catch (Exception ex)
        {
            progress($"Error indexing: {ex.Message}");
            return;
        }

    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}
