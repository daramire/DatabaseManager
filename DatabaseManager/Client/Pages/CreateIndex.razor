@page "/createindex"
@inject ICreateIndex createIndex
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h2>Create Index</h2>

<p>Target Database: @singleton.TargetConnector</p>

@if (taxonomies == null)
{
    <text>Loading...</text>
}
else
{
    <GenericSelector Options="taxonomies" Selection="Selected" Label="Choose Taxonomy"/>
}

<button class="btn btn-primary" @onclick="StartIndex">Start Indexing</button>

<div>
    <ProgressBar ValueNow="barValue" />
</div>

<div>
    <p>Current status: @statusMessage</p>
</div>

@code {
    List<ParentIndexNodes> pNodes;
    List<string> taxonomies;
    string taxonomySelection;
    CreateIndexParameters iParameters = new CreateIndexParameters();
    private string statusMessage = "Not started";
    private string TaxonomyFile = "";
    public int barValue = 0;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
        taxonomies = await createIndex.GetTaxonomies();
    }

    private async Task Selected(string selectedString)
    {
        TaxonomyFile = selectedString;
    }

    protected async Task StartIndex()
    {
        progress("Starting indexing...");
        iParameters= await createIndex.GetTaxonomy(TaxonomyFile);
        iParameters.DataConnector = singleton.TargetConnector;
        iParameters.IndexName = "Default";
        Console.WriteLine(iParameters.Taxonomy);
        try
        {
            pNodes = await createIndex.CreateParentNodes(iParameters);
            double nodeInt = 100 / pNodes.Count;
            double barInterval = 0.0;
            for (int j = 0; j < pNodes.Count; j++)
            {
                ParentIndexNodes node = pNodes[j];
                iParameters.ParentNodeNumber = j;
                iParameters.ParentNodeId = node.ParentNodeId;
                double childInt = nodeInt / node.NodeCount;
                for (int i = 0; i < node.NodeCount; i++)
                {
                    iParameters.ParentNumber = i;
                    await createIndex.CreateChildIndexes(iParameters);
                    barInterval = barInterval + childInt;
                    barValue = (int)barInterval;
                    progress("Indexing...");
                }
            }
            barValue = 100;
            progress("Indexing complete");
        }
        catch (Exception ex)
        {
            progress($"Error indexing: {ex.Message}");
            return;
        }

    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}
