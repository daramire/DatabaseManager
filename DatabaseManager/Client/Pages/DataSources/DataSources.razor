@page "/datasources"
@inject IDataSources dataSources

<h3>Data Connectors</h3>

<div class="form-group">
    <a class="btn btn-info" href="datasources/create">New Connector</a>
</div>

<GenericList List="ConnectParameters">
    <WholeListTemplate>
        <Table TableItem="ConnectParameters" Items="ConnectParameters" PageSize="@pageSize">
            <Column TableItem="ConnectParameters" Title="Action">
                <Template>
                    <a class="btn btn-success" href="/datasources/edit/@context.SourceName">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => DeleteSources(context.SourceName))">Delete</button>
                </Template>
            </Column>
            <Column TableItem="ConnectParameters" Title="Name" Field="@(x => x.SourceName)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
            <Column TableItem="ConnectParameters" Title="Database Name" Field="@(x => x.Database)" Sortable="true" Filterable="true"></Column>
            <Column TableItem="ConnectParameters" Title="Database Server" Field="@(x => x.DatabaseServer)" Sortable="true" Filterable="true"></Column>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </Table>
    </WholeListTemplate>
</GenericList>

@code {
    List<ConnectParameters> ConnectParameters;
    List<ConnectParameters> cpPagination;

    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ConnectParameters = await dataSources.GetSources();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task DeleteSources(string Name)
    {
        await dataSources.DeleteSource(Name);
        ConnectParameters = await dataSources.GetSources();
        this.StateHasChanged();
    }
}
