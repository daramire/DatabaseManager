@page "/datasources"
@inject IDataSources dataSources

<h3>Data Connectors</h3>

<div class="form-group">
    <a class="btn btn-info" href="datasources/create">New Connector</a>
</div>


<GenericList List="ConnectParameters">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Database Name</th>
                    <th>Database Server</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cpPagination)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="/datasources/edit/@item.SourceName">Edit</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteSources(item.SourceName))">Delete</button>
                        </td>
                        <td>@item.SourceName</td>
                        <td>@item.Database</td>
                        <td>@item.DatabaseServer</td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination CurrentPage="@curPage" TotalAmountPages="totalPages"
                    SelectedPage="SelectedPage" />
    </WholeListTemplate>
</GenericList>

@code {
    List<ConnectParameters> ConnectParameters;
    List<ConnectParameters> cpPagination;

    int totalPages;
    int totalRecords;
    int curPage = 1;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ConnectParameters = await dataSources.GetSources();
            cpPagination = GetPage((curPage - 1) * pageSize, pageSize);
            totalRecords = ConnectParameters.Count();
            totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task SelectedPage(int page)
    {
        curPage = page;
        cpPagination = GetPage((curPage - 1) * pageSize, pageSize);
        this.StateHasChanged();
    }

    private async Task DeleteSources(string Name)
    {
        await dataSources.DeleteSource(Name);
        ConnectParameters = await dataSources.GetSources();
        cpPagination = ConnectParameters.Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        this.StateHasChanged();
    }

    private List<ConnectParameters> GetPage(int page, int size)
    {
        List<ConnectParameters> wb = new List<ConnectParameters>();
        wb = ConnectParameters.Skip(page).Take(size).ToList();
        return wb;
    }
}
