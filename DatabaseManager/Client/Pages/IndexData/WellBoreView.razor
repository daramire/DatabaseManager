@page "/WellBores/{Id:int}"
@inject SingletonServices singleton
@inject IIndexData indexData

<h3>WellBore View</h3>

@if (index == null)
{
    <text>Loading...</text>
}
else
{
    <GenericList List="wellBores">
        <WholeListTemplate>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th></th>
                        <th>UWI</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                        <th>Well Name</th>
                        <th>Operator</th>
                        <th>Lease Name</th>
                        <th>TD</th>
                        <th>Elevation</th>
                        <th>Elevation Ref.</th>
                        <th>Field Name</th>
                        <th>Current Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (WellBore item in wbPagination)
                    {
                    <tr>
                        @if (item.ChildrenCount > 0)
                        {
                            <td>
                                <a class="btn btn-info" href="/indexdata/@item.Id">...</a>
                            </td>
                        }
                        else
                        {
                            <td></td>
                        }
                        <td>@item.Uwi</td>
                        <td>@item.Surface_Latitude</td>
                        <td>@item.Surface_Longitude</td>
                        <td>@item.Well_Name</td>
                        <td>@item.Operator</td>
                        <td>@item.Lease_Name</td>
                        <td>@item.Final_Td</td>
                        <td>@item.Depth_Datum</td>
                        <td>@item.Depth_Datum_Elev</td>
                        <td>@item.Assigned_Field</td>
                        <td>@item.Current_Status</td>
                    </tr>
                    }
                </tbody>
            </table>

            <Pagination CurrentPage="@curPage" TotalAmountPages="totalPages"
                        SelectedPage="SelectedPage" />
        </WholeListTemplate>
    </GenericList>
}

@code {
    [Parameter] public int Id { get; set; }
    public List<DmsIndex> index;
    public List<WellBore> wellBores;
    List<WellBore> wbPagination;

    int totalPages;
    int totalRecords;
    int curPage;
    int pageSize;

    protected override async Task OnInitializedAsync()
    {
        var jsonOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            IgnoreNullValues = true
        };
        curPage = 1;
        pageSize = 10;

        try
        {
            index = await indexData.GetChildren(singleton.TargetConnector, Id);
            Console.WriteLine($"Index count: {index.Count}");
            wellBores = new List<WellBore>();
            foreach (DmsIndex item in index)
            {
                string json = item.JsonData;
                Console.WriteLine($"Json data: {json}");
                WellBore wellBore = JsonSerializer.Deserialize<WellBore>(json, jsonOptions);
                Console.WriteLine($"Wellbore: {wellBore.Uwi}");
                wellBore.ChildrenCount = item.NumberOfDataObjects;
                wellBore.Id = item.Id;
                wellBores.Add(wellBore);
            }

            wbPagination = GetPage((curPage - 1) * pageSize, pageSize);
            Console.WriteLine($"Pagination: {wbPagination}");
            totalRecords = wellBores.Count();
            totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task SelectedPage(int page)
    {
        curPage = page;
        wbPagination = GetPage((curPage - 1) * pageSize, pageSize);
        this.StateHasChanged();
    }

    private List<WellBore> GetPage(int page, int size)
    {
        List<WellBore> wb = new List<WellBore>();
        wb = wellBores.Skip(page).Take(size).ToList();
        return wb;
    }
}
