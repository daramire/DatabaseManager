@page "/ppdmtoppdm"
@inject IDatabaseTransfer databaseTransfer
@inject SingletonServices singleton

<h2>PPDM to PPDM Data Transfer</h2>
<br />

<TransferParametersForm TransferParameters="transferParameters" OnValidSubmit="StartDatabaseTransfer" />

<div style="margin-top:20px">
    <ProgressBar ValueNow="barValue"/>
</div>

<div>
    <p>Current status: @statusMessage</p>
</div>


@code {
    private string statusMessage = "Not started";
    private string jsonString = "";
    TransferParameters transferParameters = new TransferParameters();
    public int barValue = 0;

    protected async Task StartDatabaseTransfer()
    {
        barValue = 0;
        Console.WriteLine("Start database transfer");
        int barInt = 50 / DatabaseTables.Names.Count;
        foreach (string tableName in DatabaseTables.Names)
        {
            transferParameters.Table = tableName;
            transferParameters.TargetName = singleton.TargetConnector;
            progress($"Deleting from {tableName}");
            try
            {
                await databaseTransfer.Delete(transferParameters);
                barValue = barValue + barInt;
            }
            catch (Exception ex)
            {
                progress($"Error Deleting from {tableName}: {ex.Message}");
                return;
            }
        }

        barInt = 50 / CopyTables.dictionary.Count;
        foreach (var table in CopyTables.dictionary)
        {
            string tableName = table.Key;
            transferParameters.Table = tableName;
            try
            {
                string tmpQuery = transferParameters.TransferQuery;
                if (table.Value == "REFERENCE") transferParameters.TransferQuery = "";
                progress($"Copying table {tableName}");
                await databaseTransfer.Copy(transferParameters);
                transferParameters.TransferQuery = tmpQuery;
                barValue = barValue + barInt;
            }
            catch (Exception ex)
            {
                progress($"Error copying from {tableName}: {ex.Message}");
                return;
            }
        }

        barValue = 100;
        progress($"Transfer Complete");
    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}
