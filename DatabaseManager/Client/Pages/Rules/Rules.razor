@page "/rules"
@inject IRules rules
@inject SingletonServices singleton

<h3>Predictions</h3>

<div class="form-group">
    <a class="btn btn-info" href="rules/saveprediction">Save Prediction Set</a>
    <a class="btn btn-info" href="rules/getpredictions">Get Prediction Set</a>
</div>

<div class="dropdown" style="margin-top:20px">
    <button @onclick="ToggleDropdownMenu" class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="@expandedState">
        New Rule
    </button>
    <div class="dropdown-menu collapse @showMenu">
        @foreach (var rule in RuleTypes)
        {
            <a class="dropdown-item" href="createrule/@rule">@rule</a>
        }
    </div>
</div>



@if (RuleList == null)
{
    <text>Loading...</text>
}
else
{
    <GenericList List="RuleList">
        <WholeListTemplate>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th></th>
                        <th>Data Type</th>
                        <th>Category</th>
                        <th>Rule Name</th>
                        <th>Active</th>
                        <th>Rule Key</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in rulePagination)
                    {
                        <tr>
                            <td>
                                <a class="btn btn-success" href="/rules/edit/@singleton.TargetConnector/@item.Id">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => RuleDelete(item.Id))">Delete</button>
                            </td>
                            <td>@item.DataType</td>
                            <td>@item.RuleType</td>
                            <td>@item.RuleName</td>
                            <td>@item.Active</td>
                            <td>@item.RuleKey</td>
                        </tr>
                    }
                </tbody>
            </table>
            <Pagination CurrentPage="@curPage" TotalAmountPages="totalPages"
                        SelectedPage="SelectedPage" />
        </WholeListTemplate>
    </GenericList>
}

@*<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        New Rule
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" href="#">Completness</a>
        <a class="dropdown-item" href="#">Validity</a>
        <a class="dropdown-item" href="#">Prediction</a>
    </div>
</div>*@

@code {
    private List<string> RuleTypes = new List<string> { "Entirety", "Completeness", "Predictions", "Validity" };
    List<RuleModel> RuleList;
    List<RuleModel> rulePagination;
    private bool expandedState = false;
    private string showMenu = null;

    int totalPages;
    int totalRecords;
    int curPage = 1;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            RuleList = await rules.GetRules(singleton.TargetConnector);
            rulePagination = GetPage((curPage - 1) * pageSize, pageSize);
            totalRecords = RuleList.Count();
            totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task RuleDelete(int id)
    {
        Console.WriteLine(id);
        await rules.DeleteRule(singleton.TargetConnector, id);
        RuleList = await rules.GetRules(singleton.TargetConnector);
        rulePagination = GetPage((curPage - 1) * pageSize, pageSize);
        this.StateHasChanged();
    }

    private async Task SelectedPage(int page)
    {
        curPage = page;
        rulePagination = GetPage((curPage - 1) * pageSize, pageSize);
        this.StateHasChanged();
    }

    private List<RuleModel> GetPage(int page, int size)
    {
        List<RuleModel> rl = new List<RuleModel>();
        rl = RuleList.Skip(page).Take(size).ToList();
        return rl;
    }

    private void ToggleDropdownMenu()
    {
        expandedState = !expandedState;
        showMenu = expandedState ? "show" : null;
    }
}
