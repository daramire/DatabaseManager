<EditForm Model="RuleToEdit" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Rule Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="RuleToEdit.RuleName" />
            <ValidationMessage For="@(() => RuleToEdit.RuleName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Data Attribute:</label>
        <select @bind="@RuleToEdit.DataAttribute">
            @foreach (var option in DataRef.DataTypeOptions)
            {
                <option>@option</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label>Rule Parameters:</label>
        <div>
            <InputText class="form-control" @bind-Value="@RuleToEdit.RuleParameters" />
            <ValidationMessage For="@(() => RuleToEdit.RuleParameters)" />
        </div>
    </div>
    <div class="form-group">
        <label>Rule Filter:</label>
        <div>
            <InputText class="form-control" @bind-Value="@RuleToEdit.RuleFilter" />
            <ValidationMessage For="@(() => RuleToEdit.RuleFilter)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description:</label>
        <div>
            <InputText class="form-control" @bind-Value="@RuleToEdit.RuleDescription" />
            <ValidationMessage For="@(() => RuleToEdit.RuleDescription)" />
        </div>
    </div>
    <button class="btn btn-success" type="submit">Save Changes</button>
</EditForm>

@code {
    [Parameter] public RuleModel RuleToEdit { get; set; }
    [Parameter] public RuleInfo DataRef { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private List<string> DataTypeOptions;

    protected override void OnInitialized()
    {
        Console.WriteLine("Init in EditRule Form");
        //RuleInfo ruleInfo = await rules.GetRuleInfo(singleton.TargetConnector);
        //DataTypeOptions = DataRef.DataTypeOptions;
        //Console.WriteLine(DataRef.DataTypeOptions.Count);
        //DataTypeOptions = new List<string> { "WellBore", "Log", "MarkerPicks" };
    }
}