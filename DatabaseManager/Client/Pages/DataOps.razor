@page "/dataops"
@inject IDataOps ops

<h3>Data Ops</h3>

<Table TableItem="PipeItems" Items="pipeList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="PipeItems" Title="Action" Sortable="false">
        <Template>
            @*<a class="btn btn-success" href="/rules/edit/@singleton.TargetConnector/@context.Id">Edit</a>
            <button class="btn btn-danger" @onclick="@(() => RuleDelete(context.Id))">Delete</button>*@
            <button class="btn btn-success" @onclick="@(() => ExecutePipeline(context.Name))">Execute</button>
        </Template>
    </Column>
    <Column TableItem="PipeItems" Title="Pipe Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>


@code{
    public class PipeItems
    {
        public string Name { get; set; }
    }

    List<PipeItems> pipeList;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        pipeList = new List<PipeItems>();
        List<string> pipes = await ops.GetPipelines();
        foreach (string pipe in pipes)
        {
            pipeList.Add(new PipeItems { Name = pipe });
        }
    }

    private async Task ExecutePipeline(string name)
    {
        Console.WriteLine($"excute pipeline {name}");
        try
        {
            await ops.ProcessPipeline(name);
            //List<RuleModel> currentRules = await rules.GetRules(singleton.TargetConnector);
            //foreach (RuleModel currRule in currentRules)
            //{
            //    await rules.DeleteRule(singleton.TargetConnector, currRule.Id);
            //}
            //List<RuleModel> ruleSet = await rules.GetPrediction(name);
            //foreach (RuleModel newRule in ruleSet)
            //{
            //    newRule.CreatedBy = Environment.UserName;
            //    await rules.InsertRule(newRule, singleton.TargetConnector);
            //}
            //navigationManager.NavigateTo("rules");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

}

