@page "/predictions"
@inject IPrediction pr
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h3>Predictions</h3>

<button class="btn btn-primary" @onclick="StartPredictions">Start Predictions</button>

<div>
    <ProgressBar ValueNow="barValue" />
</div>

<div>
    <p>Current status: @statusMessage</p>
</div>

<GenericList List="ResultList">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Friction Point</th>
                    <th>Corrections</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in rPagination)
                {
                <tr>
                    @if (item.NumberOfCorrections > 0)
                    {
                        <td>
                            <a class="btn btn-info" href="/drilldown/@item.Id">...</a>
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                    <td>@item.RuleName</td>
                    <td>@item.NumberOfCorrections</td>
                </tr>
                }
            </tbody>
        </table>
        <Pagination CurrentPage="@curPage" TotalAmountPages="totalPages"
                    SelectedPage="SelectedPage" />
    </WholeListTemplate>
</GenericList>

@code {
    List<PredictionCorrection> ResultList;
    List<PredictionCorrection> rPagination;

    int totalPages;
    int totalRecords;
    int curPage = 1;
    int pageSize = 10;

    private string statusMessage = "Not started";
    public int barValue = 0;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
        try
        {
            await PredictionResults();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    protected async Task StartPredictions()
    {
        try

        {
            PredictionParameters predictionParams = new PredictionParameters();
            predictionParams.DataAccessDefinitions = singleton.DataAccessDefinition;

            Console.WriteLine("Start prediction Processing");
            progress("Starting QC processing...");

            int progressInterval = (100 / ResultList.Count) - 1;
            barValue = 1;

            foreach (PredictionCorrection correction in ResultList)
            {
                progress($"Processing rule {correction.RuleName}");
                predictionParams.DataConnector = singleton.TargetConnector;
                predictionParams.PredictionId = correction.Id;

                Console.WriteLine("Start controller");
                await pr.ProcessPredictions(predictionParams);
                Console.WriteLine("Finished controller");

                barValue = barValue + progressInterval;
            }
            barValue = 100;

            await PredictionResults();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
            string message = ex.ToString().Substring(0, 300);
            await displayMessage.DisplayErrorMessage($"Error message from prediction server: {message}");
        }
    }

    private async Task PredictionResults()
    {
        ResultList = await pr.GetPredictions(singleton.TargetConnector);
        rPagination = ResultList.Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        totalRecords = ResultList.Count();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
    }

    private void SelectedPage(int page)
    {
        curPage = page;
        rPagination = new List<PredictionCorrection>();
        rPagination = ResultList.Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        this.StateHasChanged();
    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}
